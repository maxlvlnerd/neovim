-- [nfnl] modules/neorg.fnl
 package.preload["boiler"] = package.preload["boiler"] or function(...) local function noremap(maps) for _, v in ipairs(maps) do vim.keymap.set((v.mode or ""), v.key, v.action, {silent = true, desc = v.desc}) end return nil end local function plug(name, opts) _G["plugin-specs"][name] = vim.tbl_extend("force", _G["plugin-specs"][name], opts) return nil end local function load_lazy() local lazy = require("lazy") local plugs do local tbl_21_ = {} local i_22_ = 0 for _, v in pairs(_G["plugin-specs"]) do local val_23_ = v if (nil ~= val_23_) then i_22_ = (i_22_ + 1) tbl_21_[i_22_] = val_23_ else end end plugs = tbl_21_ end return lazy.setup({checker = {enabled = true}, rocks = {enabled = false}, profiling = {loader = true, require = true}, spec = plugs}) end local function new_cmd(name, cb) return vim.api.nvim_create_user_command(name, cb, {}) end local function cmp_add_icon(ctx) local icon = ctx.kind_icon if vim.tbl_contains({"Path"}, ctx.source_name) then local dev_icon, _ = require("nvim-web-devicons").get_icon(ctx.label) if dev_icon then icon = dev_icon else end else icon = require("lspkind").symbolic(ctx.kind, {mode = "symbol"}) end return (icon .. ctx.icon_gap) end local function cmp_highlight(ctx) local hl = ctx.kind_hl if vim.tbl_contains({"Path"}, ctx.source_name) then local dev_icon, dev_hl = require("nvim-web-devicons").get_icon(ctx.label) if dev_icon then hl = dev_hl else end else end return hl end local function neorg_finder() local neorg = require("neorg") local dirman = neorg.modules.get_module("core.dirman") local _let_6_ = dirman.get_current_workspace() local workspace = _let_6_[1] local cwd = _let_6_[2] local workspace_files = dirman.get_norg_files(workspace) local tbl_21_ = {} local i_22_ = 0 for _, v in ipairs(workspace_files) do local val_23_ = {file = tostring(v)} if (nil ~= val_23_) then i_22_ = (i_22_ + 1) tbl_21_[i_22_] = val_23_ else end end return tbl_21_ end local function parse_plugins(plugins) local tbl_21_ = {} local i_22_ = 0 for _, v in ipairs(plugins) do local val_23_ do local _8_ = type(v) if (_8_ == "table") then val_23_ = v elseif (_8_ == "string") then val_23_ = {v, {}} else val_23_ = nil end end if (nil ~= val_23_) then i_22_ = (i_22_ + 1) tbl_21_[i_22_] = val_23_ else end end return tbl_21_ end local function do_setup(plugins) end return {plug = plug, noremap = noremap, ["load-lazy"] = load_lazy, ["new-cmd"] = new_cmd, ["cmp-highlight"] = cmp_highlight, ["cmp-add-icon"] = cmp_add_icon, ["neorg-finder"] = neorg_finder} end local _local_11_ = require("boiler") local plug = _local_11_["plug"]
 return plug("neorg", {opts = {load = {["core.defaults"] = {}, ["core.concealer"] = {}, ["external.interim-ls"] = {config = {completion_provider = {enable = true, documentation = true}}}, ["core.completion"] = {config = {engine = {module_name = "external.lsp-completion"}}}, ["core.dirman"] = {config = {workspaces = {main = "~/persist/logs/notes"}, default_workspace = "main"}}}}})
